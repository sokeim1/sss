import os
import asyncio
import yt_dlp
import logging
from typing import Optional, Dict, List
from config import YTDL_OPTIONS, DOWNLOADS_DIR, TEMP_DIR, MAX_DOWNLOAD_SIZE_MB

logger = logging.getLogger(__name__)

class SoundCloudDownloader:
    def __init__(self):
        self.ytdl_opts = YTDL_OPTIONS.copy()
        self._ensure_directories()
    
    def _ensure_directories(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        os.makedirs(DOWNLOADS_DIR, exist_ok=True)
        os.makedirs(TEMP_DIR, exist_ok=True)
    
    async def search_tracks(self, query: str, limit: int = 5) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –Ω–∞ SoundCloud"""
        try:
            # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞
            ytdl_opts = {
                'quiet': True,
                'no_warnings': True,
                'socket_timeout': 30,
                'retries': 3,
                'fragment_retries': 3,
                'skip_unavailable_fragments': True,
                'ignoreerrors': True,
                'no_check_certificate': True,
                'prefer_insecure': True,
                'geo_bypass': True,
                'extractor_retries': 2
            }
            
            # –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –Ω–∞ SoundCloud
            search_queries = [
                f"ytsearch{limit}:{query}",  # YouTube –ø–æ–∏—Å–∫
                f"scsearch{limit}:{query}",  # SoundCloud –ø–æ–∏—Å–∫
                f"ytsearch{limit}:{query} music",  # YouTube —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º "music"
                f"scsearch{limit}:{query} remix",  # SoundCloud —Ä–µ–º–∏–∫—Å—ã
            ]
            
            tracks = []
            
            for search_url in search_queries:
                if len(tracks) >= limit:
                    break
                    
                try:
                    logger.info(f"–ü–æ–∏—Å–∫ —Å –∑–∞–ø—Ä–æ—Å–æ–º: {search_url}")
                    
                    with yt_dlp.YoutubeDL(ytdl_opts) as ydl:
                        search_results = await asyncio.get_event_loop().run_in_executor(
                            None, ydl.extract_info, search_url, False
                        )
                    
                    if search_results and 'entries' in search_results:
                        for entry in search_results['entries']:
                            if entry and len(tracks) < limit:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
                                if entry.get('availability') == 'unavailable':
                                    continue
                                    
                                webpage_url = entry.get('webpage_url', '')
                                title = entry.get('title', 'Unknown')
                                
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ URL
                                source = 'SoundCloud' if 'soundcloud.com' in webpage_url else 'YouTube'
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏
                                track_info = {
                                    'title': title,
                                    'uploader': entry.get('uploader', 'Unknown'),
                                    'duration': entry.get('duration', 0),
                                    'url': webpage_url,
                                    'id': entry.get('id', ''),
                                    'thumbnail': entry.get('thumbnail', ''),
                                    'source': source
                                }
                                tracks.append(track_info)
                                logger.info(f"–ù–∞–π–¥–µ–Ω —Ç—Ä–µ–∫: {title} –æ—Ç {entry.get('uploader', 'Unknown')} ({source})")
                        
                except Exception as search_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º {search_url}: {search_error}")
                    continue
            
            logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: {len(tracks)}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ (—É–±–∏—Ä–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-—Ç—Ä–µ–∫–æ–≤)
            return tracks[:limit]
            
        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return []
    
    async def get_track_info(self, url: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ"""
        try:
            with yt_dlp.YoutubeDL({'quiet': True}) as ydl:
                info = await asyncio.get_event_loop().run_in_executor(
                    None, ydl.extract_info, url, False
                )
            
            if info:
                return {
                    'title': info.get('title', 'Unknown'),
                    'uploader': info.get('uploader', 'Unknown'),
                    'duration': info.get('duration', 0),
                    'url': info.get('webpage_url', url),
                    'filesize': info.get('filesize', 0),
                    'thumbnail': info.get('thumbnail', '')
                }
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return None
    
    async def download_track(self, url: str, user_id: int) -> Optional[str]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –¥–µ–º–æ-—Ç—Ä–µ–∫ –∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π
            if 'demo' in url.lower():
                logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–µ–º–æ-—Ç—Ä–µ–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ")
                return None
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_dir = os.path.join(DOWNLOADS_DIR, str(user_id))
            os.makedirs(user_dir, exist_ok=True)
            
            # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ
            opts = {
                'format': 'bestaudio[ext=m4a]/bestaudio/best',
                'extractaudio': True,
                'audioformat': 'mp3',
                'audioquality': '192K',
                'outtmpl': os.path.join(user_dir, '%(title)s.%(ext)s'),
                'restrictfilenames': True,
                'noplaylist': True,
                'nocheckcertificate': True,
                'ignoreerrors': True,
                'logtostderr': False,
                'quiet': True,
                'no_warnings': True,
                'socket_timeout': 60,
                'retries': 5,
                'fragment_retries': 5,
                'skip_unavailable_fragments': True,
                'geo_bypass': True,
                'prefer_insecure': True
            }
            
            with yt_dlp.YoutubeDL(opts) as ydl:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                await asyncio.get_event_loop().run_in_executor(
                    None, ydl.download, [url]
                )
                
                # –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                for file in os.listdir(user_dir):
                    if file.endswith(('.mp3', '.wav', '.m4a', '.flac', '.webm')):
                        file_path = os.path.join(user_dir, file)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                        if os.path.getsize(file_path) > MAX_DOWNLOAD_SIZE_MB * 1024 * 1024:
                            os.remove(file_path)
                            raise Exception(f"–°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>{MAX_DOWNLOAD_SIZE_MB}MB)")
                        
                        return file_path
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            user_dir = os.path.join(DOWNLOADS_DIR, str(user_id))
            if os.path.exists(user_dir):
                for file in os.listdir(user_dir):
                    try:
                        os.remove(os.path.join(user_dir, file))
                    except:
                        pass
            raise e
    
    async def create_demo_file(self, user_id: int) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ-—Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            user_dir = os.path.join(DOWNLOADS_DIR, str(user_id))
            os.makedirs(user_dir, exist_ok=True)
            
            demo_file = os.path.join(user_dir, "demo_track.txt")
            
            with open(demo_file, 'w', encoding='utf-8') as f:
                f.write("üéµ –≠—Ç–æ –¥–µ–º–æ-—Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞\n")
                f.write("üì± –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ\n")
                f.write("üåê –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏\n")
                f.write("üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ö–æ—Å—Ç–∏–Ω–≥ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ YouTube/SoundCloud")
            
            return demo_file
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-—Ñ–∞–π–ª–∞: {e}")
            return None
    
    def cleanup_user_files(self, user_id: int):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_dir = os.path.join(DOWNLOADS_DIR, str(user_id))
        if os.path.exists(user_dir):
            for file in os.listdir(user_dir):
                try:
                    os.remove(os.path.join(user_dir, file))
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file}: {e}")
    
    def format_duration(self, seconds) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–∫–∞"""
        if not seconds or seconds == 0:
            return "Unknown"
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int –µ—Å–ª–∏ —ç—Ç–æ float
        try:
            seconds = int(float(seconds))
        except (ValueError, TypeError):
            return "Unknown"
        
        minutes = seconds // 60
        seconds = seconds % 60
        return f"{minutes}:{seconds:02d}"
